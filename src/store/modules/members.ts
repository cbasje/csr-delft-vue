import axios from 'axios';

// Generated by https://quicktype.io

export interface Member {
    id:       number;
    name:     string;
    username: string;
    email:    string;
    address:  Address;
    phone:    string;
    website:  string;
    company:  Company;
}

export interface Address {
    street:  string;
    suite:   string;
    city:    string;
    zipcode: string;
    geo:     Geo;
}

export interface Geo {
    lat: string;
    lng: string;
}

export interface Company {
    name:        string;
    catchPhrase: string;
    bs:          string;
}

const state = () => ({
    users: []
});

const getters = {
    allMembers(state: any){
        return state.users;
    },
    userById(state: any){
        return (id: number) => {
            return state.users.find((u: Member) => u.id == id);
        }
    }
};

const actions = {
    async fetchUsers({ commit }: {commit: Function}){
       const response = await axios.get(`${process.env.VUE_APP_SITE_URL}/leden`);
       commit('saveAllUsers', response.data);
    },

    async addUser({ commit }: {commit: Function}, payload: Member[]){
        // since our rest api only support get
        // here we simply update the store state
        commit('addUser', payload);
    },

    async updateUser({ commit }: {commit: Function}, payload: Member){
         // since our rest api only support get
        // here we simply update the store state
        commit('updateUser', payload);
    },
    async deleteUser({ commit }: {commit: Function}, id: number){
         // since our rest api only support get
        // here we simply update the store state
        commit('deleteUser', id);
    }
};

const mutations = {
    saveAllUsers(state: any, payload: Member[]){
        state.users = payload;
    },
    addUser(state: any, payload: Member){
        payload.id = (state.users.length + 1); // this line of code is fake , when we have save no nedd to write this line
        state.users.unshift(payload);
    },
    updateUser(state: any, payload: Member){
        const filteredUsers = state.users.filter((u: Member) => u.id !== payload.id);
        filteredUsers.unshift(payload);
        state.users = filteredUsers;
    },
    deleteUser(state: any, id: number){
        state.users = state.users.filter((u: Member) => u.id !== id);
    }
};

export default {
    namespaced: true,
    state,
    getters,
    actions,
    mutations
}
